// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

                // ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports
                
import 'dart:convert';
            import 'dart:typed_data';
import 'package:freezed_annotation/freezed_annotation.dart';


import 'dart:convert';
            import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;


part 'bridge_generated.freezed.dart';









abstract class Anthem {
            Future<void> startEngine({ required int id,dynamic hint });

FlutterRustBridgeTaskConstMeta get kStartEngineConstMeta;

Future<void> stopEngine({ required int id,dynamic hint });

FlutterRustBridgeTaskConstMeta get kStopEngineConstMeta;

Future<Reply?> send({ required int engineId,required Request request,dynamic hint });

FlutterRustBridgeTaskConstMeta get kSendConstMeta;

Future<MousePos> getMousePos({ dynamic hint });

FlutterRustBridgeTaskConstMeta get kGetMousePosConstMeta;

Future<void> setMousePos({ required int x,required int y,dynamic hint });

FlutterRustBridgeTaskConstMeta get kSetMousePosConstMeta;

Future<Uint8List> drawMandelbrot({ required Size imageSize,required Point zoomPoint,required double scale,required int numThreads,dynamic hint });

FlutterRustBridgeTaskConstMeta get kDrawMandelbrotConstMeta;

Future<String> passingComplexStructs({ required TreeNode root,dynamic hint });

FlutterRustBridgeTaskConstMeta get kPassingComplexStructsConstMeta;

Future<int> offTopicMemoryTestInputArray({ required Uint8List input,dynamic hint });

FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestInputArrayConstMeta;

Future<Uint8List> offTopicMemoryTestOutputZeroCopyBuffer({ required int len,dynamic hint });

FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestOutputZeroCopyBufferConstMeta;

Future<Uint8List> offTopicMemoryTestOutputVecU8({ required int len,dynamic hint });

FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestOutputVecU8ConstMeta;

Future<int> offTopicMemoryTestInputVecOfObject({ required List<Size> input,dynamic hint });

FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestInputVecOfObjectConstMeta;

Future<List<Size>> offTopicMemoryTestOutputVecOfObject({ required int len,dynamic hint });

FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestOutputVecOfObjectConstMeta;

Future<int> offTopicMemoryTestInputComplexStruct({ required TreeNode input,dynamic hint });

FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestInputComplexStructConstMeta;

Future<TreeNode> offTopicMemoryTestOutputComplexStruct({ required int len,dynamic hint });

FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestOutputComplexStructConstMeta;

Future<int> offTopicDeliberatelyReturnError({ dynamic hint });

FlutterRustBridgeTaskConstMeta get kOffTopicDeliberatelyReturnErrorConstMeta;

Future<int> offTopicDeliberatelyPanic({ dynamic hint });

FlutterRustBridgeTaskConstMeta get kOffTopicDeliberatelyPanicConstMeta;
        }

        



























class MousePos {
                final int x;
final int y;

                MousePos({required this.x,required this.y,});
            }



class Pattern {
                final int id;

                Pattern({required this.id,});
            }

class Point {
                final double x;
final double y;

                Point({required this.x,required this.y,});
            }

class Project {
                final int id;
final Song song;

                Project({required this.id,required this.song,});
            }

@freezed
                class Reply with _$Reply {
                    const factory Reply.getModelReply(Project field0,) = GetModelReply;
                }

@freezed
                class Request with _$Request {
                    const factory Request.init() = Init;
const factory Request.exit() = Exit;
const factory Request.getModel() = GetModel;
const factory Request.loadModel(Project field0,) = LoadModel;
                }

class Size {
                final int width;
final int height;

                Size({required this.width,required this.height,});
            }

class Song {
                final int id;
final List<Pattern> patterns;

                Song({required this.id,required this.patterns,});
            }

class TreeNode {
                final String name;
final List<TreeNode> children;

                TreeNode({required this.name,required this.children,});
            }








        

class AnthemImpl extends FlutterRustBridgeBase<AnthemWire> implements Anthem {
            factory AnthemImpl(ffi.DynamicLibrary dylib) => AnthemImpl.raw(AnthemWire(dylib));

            AnthemImpl.raw(AnthemWire inner) : super(inner);

            Future<void> startEngine({ required int id,dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_start_engine(port_, _api2wire_i64(id)),
            parseSuccessData: _wire2api_unit,
            
        constMeta: kStartEngineConstMeta,
        argValues: [id],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kStartEngineConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "start_engine",
            argNames: ["id"],
        );
        

Future<void> stopEngine({ required int id,dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_stop_engine(port_, _api2wire_i64(id)),
            parseSuccessData: _wire2api_unit,
            
        constMeta: kStopEngineConstMeta,
        argValues: [id],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kStopEngineConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "stop_engine",
            argNames: ["id"],
        );
        

Future<Reply?> send({ required int engineId,required Request request,dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_send(port_, _api2wire_i64(engineId), _api2wire_box_autoadd_request(request)),
            parseSuccessData: _wire2api_opt_reply,
            
        constMeta: kSendConstMeta,
        argValues: [engineId, request],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kSendConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "send",
            argNames: ["engineId", "request"],
        );
        

Future<MousePos> getMousePos({ dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_get_mouse_pos(port_),
            parseSuccessData: _wire2api_mouse_pos,
            
        constMeta: kGetMousePosConstMeta,
        argValues: [],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kGetMousePosConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "get_mouse_pos",
            argNames: [],
        );
        

Future<void> setMousePos({ required int x,required int y,dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_set_mouse_pos(port_, _api2wire_i32(x), _api2wire_i32(y)),
            parseSuccessData: _wire2api_unit,
            
        constMeta: kSetMousePosConstMeta,
        argValues: [x, y],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kSetMousePosConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "set_mouse_pos",
            argNames: ["x", "y"],
        );
        

Future<Uint8List> drawMandelbrot({ required Size imageSize,required Point zoomPoint,required double scale,required int numThreads,dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_draw_mandelbrot(port_, _api2wire_box_autoadd_size(imageSize), _api2wire_box_autoadd_point(zoomPoint), _api2wire_f64(scale), _api2wire_i32(numThreads)),
            parseSuccessData: _wire2api_ZeroCopyBuffer_Uint8List,
            
        constMeta: kDrawMandelbrotConstMeta,
        argValues: [imageSize, zoomPoint, scale, numThreads],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kDrawMandelbrotConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "draw_mandelbrot",
            argNames: ["imageSize", "zoomPoint", "scale", "numThreads"],
        );
        

Future<String> passingComplexStructs({ required TreeNode root,dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_passing_complex_structs(port_, _api2wire_box_autoadd_tree_node(root)),
            parseSuccessData: _wire2api_String,
            
        constMeta: kPassingComplexStructsConstMeta,
        argValues: [root],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kPassingComplexStructsConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "passing_complex_structs",
            argNames: ["root"],
        );
        

Future<int> offTopicMemoryTestInputArray({ required Uint8List input,dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_off_topic_memory_test_input_array(port_, _api2wire_uint_8_list(input)),
            parseSuccessData: _wire2api_i32,
            
        constMeta: kOffTopicMemoryTestInputArrayConstMeta,
        argValues: [input],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestInputArrayConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "off_topic_memory_test_input_array",
            argNames: ["input"],
        );
        

Future<Uint8List> offTopicMemoryTestOutputZeroCopyBuffer({ required int len,dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_off_topic_memory_test_output_zero_copy_buffer(port_, _api2wire_i32(len)),
            parseSuccessData: _wire2api_ZeroCopyBuffer_Uint8List,
            
        constMeta: kOffTopicMemoryTestOutputZeroCopyBufferConstMeta,
        argValues: [len],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestOutputZeroCopyBufferConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "off_topic_memory_test_output_zero_copy_buffer",
            argNames: ["len"],
        );
        

Future<Uint8List> offTopicMemoryTestOutputVecU8({ required int len,dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_off_topic_memory_test_output_vec_u8(port_, _api2wire_i32(len)),
            parseSuccessData: _wire2api_uint_8_list,
            
        constMeta: kOffTopicMemoryTestOutputVecU8ConstMeta,
        argValues: [len],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestOutputVecU8ConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "off_topic_memory_test_output_vec_u8",
            argNames: ["len"],
        );
        

Future<int> offTopicMemoryTestInputVecOfObject({ required List<Size> input,dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_off_topic_memory_test_input_vec_of_object(port_, _api2wire_list_size(input)),
            parseSuccessData: _wire2api_i32,
            
        constMeta: kOffTopicMemoryTestInputVecOfObjectConstMeta,
        argValues: [input],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestInputVecOfObjectConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "off_topic_memory_test_input_vec_of_object",
            argNames: ["input"],
        );
        

Future<List<Size>> offTopicMemoryTestOutputVecOfObject({ required int len,dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_off_topic_memory_test_output_vec_of_object(port_, _api2wire_i32(len)),
            parseSuccessData: _wire2api_list_size,
            
        constMeta: kOffTopicMemoryTestOutputVecOfObjectConstMeta,
        argValues: [len],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestOutputVecOfObjectConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "off_topic_memory_test_output_vec_of_object",
            argNames: ["len"],
        );
        

Future<int> offTopicMemoryTestInputComplexStruct({ required TreeNode input,dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_off_topic_memory_test_input_complex_struct(port_, _api2wire_box_autoadd_tree_node(input)),
            parseSuccessData: _wire2api_i32,
            
        constMeta: kOffTopicMemoryTestInputComplexStructConstMeta,
        argValues: [input],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestInputComplexStructConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "off_topic_memory_test_input_complex_struct",
            argNames: ["input"],
        );
        

Future<TreeNode> offTopicMemoryTestOutputComplexStruct({ required int len,dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_off_topic_memory_test_output_complex_struct(port_, _api2wire_i32(len)),
            parseSuccessData: _wire2api_tree_node,
            
        constMeta: kOffTopicMemoryTestOutputComplexStructConstMeta,
        argValues: [len],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kOffTopicMemoryTestOutputComplexStructConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "off_topic_memory_test_output_complex_struct",
            argNames: ["len"],
        );
        

Future<int> offTopicDeliberatelyReturnError({ dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_off_topic_deliberately_return_error(port_),
            parseSuccessData: _wire2api_i32,
            
        constMeta: kOffTopicDeliberatelyReturnErrorConstMeta,
        argValues: [],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kOffTopicDeliberatelyReturnErrorConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "off_topic_deliberately_return_error",
            argNames: [],
        );
        

Future<int> offTopicDeliberatelyPanic({ dynamic hint }) => executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => inner.wire_off_topic_deliberately_panic(port_),
            parseSuccessData: _wire2api_i32,
            
        constMeta: kOffTopicDeliberatelyPanicConstMeta,
        argValues: [],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kOffTopicDeliberatelyPanicConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "off_topic_deliberately_panic",
            argNames: [],
        );
        

            // Section: api2wire
            ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
            return _api2wire_uint_8_list(utf8.encoder.convert(raw));
        }
        

ffi.Pointer<wire_Point> _api2wire_box_autoadd_point(Point raw) {
            final ptr = inner.new_box_autoadd_point_0();
                    _api_fill_to_wire_point(raw, ptr.ref);
                    return ptr;
        }
        

ffi.Pointer<wire_Project> _api2wire_box_autoadd_project(Project raw) {
            final ptr = inner.new_box_autoadd_project_0();
                    _api_fill_to_wire_project(raw, ptr.ref);
                    return ptr;
        }
        

ffi.Pointer<wire_Request> _api2wire_box_autoadd_request(Request raw) {
            final ptr = inner.new_box_autoadd_request_0();
                    _api_fill_to_wire_request(raw, ptr.ref);
                    return ptr;
        }
        

ffi.Pointer<wire_Size> _api2wire_box_autoadd_size(Size raw) {
            final ptr = inner.new_box_autoadd_size_0();
                    _api_fill_to_wire_size(raw, ptr.ref);
                    return ptr;
        }
        

ffi.Pointer<wire_TreeNode> _api2wire_box_autoadd_tree_node(TreeNode raw) {
            final ptr = inner.new_box_autoadd_tree_node_0();
                    _api_fill_to_wire_tree_node(raw, ptr.ref);
                    return ptr;
        }
        

ffi.Pointer<wire_Song> _api2wire_box_song(Song raw) {
            final ptr = inner.new_box_song_0();
                    _api_fill_to_wire_song(raw, ptr.ref);
                    return ptr;
        }
        

double _api2wire_f64(double raw) {
            return raw;
        }
        

int _api2wire_i32(int raw) {
            return raw;
        }
        

int _api2wire_i64(int raw) {
            return raw;
        }
        

ffi.Pointer<wire_list_pattern> _api2wire_list_pattern(List<Pattern> raw) {
            final ans = inner.new_list_pattern_0(raw.length);
                for (var i = 0; i < raw.length; ++i) {
                    _api_fill_to_wire_pattern(raw[i], ans.ref.ptr[i]);
                }
                return ans;
        }
        

ffi.Pointer<wire_list_size> _api2wire_list_size(List<Size> raw) {
            final ans = inner.new_list_size_0(raw.length);
                for (var i = 0; i < raw.length; ++i) {
                    _api_fill_to_wire_size(raw[i], ans.ref.ptr[i]);
                }
                return ans;
        }
        

ffi.Pointer<wire_list_tree_node> _api2wire_list_tree_node(List<TreeNode> raw) {
            final ans = inner.new_list_tree_node_0(raw.length);
                for (var i = 0; i < raw.length; ++i) {
                    _api_fill_to_wire_tree_node(raw[i], ans.ref.ptr[i]);
                }
                return ans;
        }
        















int _api2wire_u64(int raw) {
            return raw;
        }
        

int _api2wire_u8(int raw) {
            return raw;
        }
        

ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
            final ans = inner.new_uint_8_list_0(raw.length);
                ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
                return ans;
        }
        

            // Section: api_fill_to_wire
            

void _api_fill_to_wire_box_autoadd_point(Point apiObj, ffi.Pointer<wire_Point> wireObj) {
             _api_fill_to_wire_point(apiObj, wireObj.ref);
        }

void _api_fill_to_wire_box_autoadd_project(Project apiObj, ffi.Pointer<wire_Project> wireObj) {
             _api_fill_to_wire_project(apiObj, wireObj.ref);
        }

void _api_fill_to_wire_box_autoadd_request(Request apiObj, ffi.Pointer<wire_Request> wireObj) {
             _api_fill_to_wire_request(apiObj, wireObj.ref);
        }

void _api_fill_to_wire_box_autoadd_size(Size apiObj, ffi.Pointer<wire_Size> wireObj) {
             _api_fill_to_wire_size(apiObj, wireObj.ref);
        }

void _api_fill_to_wire_box_autoadd_tree_node(TreeNode apiObj, ffi.Pointer<wire_TreeNode> wireObj) {
             _api_fill_to_wire_tree_node(apiObj, wireObj.ref);
        }

void _api_fill_to_wire_box_song(Song apiObj, ffi.Pointer<wire_Song> wireObj) {
             _api_fill_to_wire_song(apiObj, wireObj.ref);
        }













void _api_fill_to_wire_pattern(Pattern apiObj, wire_Pattern wireObj) {
            wireObj.id = _api2wire_u64(apiObj.id);
        }

void _api_fill_to_wire_point(Point apiObj, wire_Point wireObj) {
            wireObj.x = _api2wire_f64(apiObj.x);
wireObj.y = _api2wire_f64(apiObj.y);
        }

void _api_fill_to_wire_project(Project apiObj, wire_Project wireObj) {
            wireObj.id = _api2wire_u64(apiObj.id);
wireObj.song = _api2wire_box_song(apiObj.song);
        }

void _api_fill_to_wire_request(Request apiObj, wire_Request wireObj) {
            if (apiObj is Init) { wireObj.tag = 0; return; }
if (apiObj is Exit) { wireObj.tag = 1; return; }
if (apiObj is GetModel) { wireObj.tag = 2; return; }
if (apiObj is LoadModel) {
                            wireObj.tag = 3;
                            wireObj.kind = inner.inflate_Request_LoadModel();
                            wireObj.kind.ref.LoadModel.ref.field0 = _api2wire_box_autoadd_project(apiObj.field0);
                        }
        }

void _api_fill_to_wire_size(Size apiObj, wire_Size wireObj) {
            wireObj.width = _api2wire_i32(apiObj.width);
wireObj.height = _api2wire_i32(apiObj.height);
        }

void _api_fill_to_wire_song(Song apiObj, wire_Song wireObj) {
            wireObj.id = _api2wire_u64(apiObj.id);
wireObj.patterns = _api2wire_list_pattern(apiObj.patterns);
        }

void _api_fill_to_wire_tree_node(TreeNode apiObj, wire_TreeNode wireObj) {
            wireObj.name = _api2wire_String(apiObj.name);
wireObj.children = _api2wire_list_tree_node(apiObj.children);
        }






        }

        // Section: wire2api
        String _wire2api_String(dynamic raw) {
            return raw as String;
        }
        

Uint8List _wire2api_ZeroCopyBuffer_Uint8List(dynamic raw) {
            return raw as Uint8List;
        }
        

Project _wire2api_box_autoadd_project(dynamic raw) {
            return _wire2api_project(raw);
        }
        

Song _wire2api_box_song(dynamic raw) {
            return _wire2api_song(raw);
        }
        

int _wire2api_i32(dynamic raw) {
            return raw as int;
        }
        

List<Pattern> _wire2api_list_pattern(dynamic raw) {
            return (raw as List<dynamic>).map(_wire2api_pattern).toList();
        }
        

List<Size> _wire2api_list_size(dynamic raw) {
            return (raw as List<dynamic>).map(_wire2api_size).toList();
        }
        

List<TreeNode> _wire2api_list_tree_node(dynamic raw) {
            return (raw as List<dynamic>).map(_wire2api_tree_node).toList();
        }
        

MousePos _wire2api_mouse_pos(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return MousePos(x: _wire2api_i32(arr[0]),
y: _wire2api_i32(arr[1]),);
        }
        

Reply? _wire2api_opt_reply(dynamic raw) {
            return raw == null ? null : _wire2api_reply(raw);
        }
        

Pattern _wire2api_pattern(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
                return Pattern(id: _wire2api_u64(arr[0]),);
        }
        

Project _wire2api_project(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return Project(id: _wire2api_u64(arr[0]),
song: _wire2api_box_song(arr[1]),);
        }
        

Reply _wire2api_reply(dynamic raw) {
            switch (raw[0]) {
                    case 0: return GetModelReply(_wire2api_box_autoadd_project(raw[1]),);
                    default: throw Exception("unreachable");
                }
        }
        

Size _wire2api_size(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return Size(width: _wire2api_i32(arr[0]),
height: _wire2api_i32(arr[1]),);
        }
        

Song _wire2api_song(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return Song(id: _wire2api_u64(arr[0]),
patterns: _wire2api_list_pattern(arr[1]),);
        }
        

TreeNode _wire2api_tree_node(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return TreeNode(name: _wire2api_String(arr[0]),
children: _wire2api_list_tree_node(arr[1]),);
        }
        

int _wire2api_u64(dynamic raw) {
            return raw as int;
        }
        

int _wire2api_u8(dynamic raw) {
            return raw as int;
        }
        

Uint8List _wire2api_uint_8_list(dynamic raw) {
            return raw as Uint8List;
        }
        

void _wire2api_unit(dynamic raw) {
            return;
        }
        
        
// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class AnthemWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AnthemWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AnthemWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_start_engine(
    int port_,
    int id,
  ) {
    return _wire_start_engine(
      port_,
      id,
    );
  }

  late final _wire_start_enginePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>(
          'wire_start_engine');
  late final _wire_start_engine =
      _wire_start_enginePtr.asFunction<void Function(int, int)>();

  void wire_stop_engine(
    int port_,
    int id,
  ) {
    return _wire_stop_engine(
      port_,
      id,
    );
  }

  late final _wire_stop_enginePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>(
          'wire_stop_engine');
  late final _wire_stop_engine =
      _wire_stop_enginePtr.asFunction<void Function(int, int)>();

  void wire_send(
    int port_,
    int engine_id,
    ffi.Pointer<wire_Request> request,
  ) {
    return _wire_send(
      port_,
      engine_id,
      request,
    );
  }

  late final _wire_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Int64, ffi.Pointer<wire_Request>)>>('wire_send');
  late final _wire_send = _wire_sendPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_Request>)>();

  void wire_get_mouse_pos(
    int port_,
  ) {
    return _wire_get_mouse_pos(
      port_,
    );
  }

  late final _wire_get_mouse_posPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_mouse_pos');
  late final _wire_get_mouse_pos =
      _wire_get_mouse_posPtr.asFunction<void Function(int)>();

  void wire_set_mouse_pos(
    int port_,
    int x,
    int y,
  ) {
    return _wire_set_mouse_pos(
      port_,
      x,
      y,
    );
  }

  late final _wire_set_mouse_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Int32, ffi.Int32)>>('wire_set_mouse_pos');
  late final _wire_set_mouse_pos =
      _wire_set_mouse_posPtr.asFunction<void Function(int, int, int)>();

  void wire_draw_mandelbrot(
    int port_,
    ffi.Pointer<wire_Size> image_size,
    ffi.Pointer<wire_Point> zoom_point,
    double scale,
    int num_threads,
  ) {
    return _wire_draw_mandelbrot(
      port_,
      image_size,
      zoom_point,
      scale,
      num_threads,
    );
  }

  late final _wire_draw_mandelbrotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Size>,
              ffi.Pointer<wire_Point>,
              ffi.Double,
              ffi.Int32)>>('wire_draw_mandelbrot');
  late final _wire_draw_mandelbrot = _wire_draw_mandelbrotPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Size>, ffi.Pointer<wire_Point>, double, int)>();

  void wire_passing_complex_structs(
    int port_,
    ffi.Pointer<wire_TreeNode> root,
  ) {
    return _wire_passing_complex_structs(
      port_,
      root,
    );
  }

  late final _wire_passing_complex_structsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_TreeNode>)>>('wire_passing_complex_structs');
  late final _wire_passing_complex_structs = _wire_passing_complex_structsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_TreeNode>)>();

  void wire_off_topic_memory_test_input_array(
    int port_,
    ffi.Pointer<wire_uint_8_list> input,
  ) {
    return _wire_off_topic_memory_test_input_array(
      port_,
      input,
    );
  }

  late final _wire_off_topic_memory_test_input_arrayPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_off_topic_memory_test_input_array');
  late final _wire_off_topic_memory_test_input_array =
      _wire_off_topic_memory_test_input_arrayPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_off_topic_memory_test_output_zero_copy_buffer(
    int port_,
    int len,
  ) {
    return _wire_off_topic_memory_test_output_zero_copy_buffer(
      port_,
      len,
    );
  }

  late final _wire_off_topic_memory_test_output_zero_copy_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_off_topic_memory_test_output_zero_copy_buffer');
  late final _wire_off_topic_memory_test_output_zero_copy_buffer =
      _wire_off_topic_memory_test_output_zero_copy_bufferPtr
          .asFunction<void Function(int, int)>();

  void wire_off_topic_memory_test_output_vec_u8(
    int port_,
    int len,
  ) {
    return _wire_off_topic_memory_test_output_vec_u8(
      port_,
      len,
    );
  }

  late final _wire_off_topic_memory_test_output_vec_u8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_off_topic_memory_test_output_vec_u8');
  late final _wire_off_topic_memory_test_output_vec_u8 =
      _wire_off_topic_memory_test_output_vec_u8Ptr
          .asFunction<void Function(int, int)>();

  void wire_off_topic_memory_test_input_vec_of_object(
    int port_,
    ffi.Pointer<wire_list_size> input,
  ) {
    return _wire_off_topic_memory_test_input_vec_of_object(
      port_,
      input,
    );
  }

  late final _wire_off_topic_memory_test_input_vec_of_objectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_size>)>>(
      'wire_off_topic_memory_test_input_vec_of_object');
  late final _wire_off_topic_memory_test_input_vec_of_object =
      _wire_off_topic_memory_test_input_vec_of_objectPtr
          .asFunction<void Function(int, ffi.Pointer<wire_list_size>)>();

  void wire_off_topic_memory_test_output_vec_of_object(
    int port_,
    int len,
  ) {
    return _wire_off_topic_memory_test_output_vec_of_object(
      port_,
      len,
    );
  }

  late final _wire_off_topic_memory_test_output_vec_of_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_off_topic_memory_test_output_vec_of_object');
  late final _wire_off_topic_memory_test_output_vec_of_object =
      _wire_off_topic_memory_test_output_vec_of_objectPtr
          .asFunction<void Function(int, int)>();

  void wire_off_topic_memory_test_input_complex_struct(
    int port_,
    ffi.Pointer<wire_TreeNode> input,
  ) {
    return _wire_off_topic_memory_test_input_complex_struct(
      port_,
      input,
    );
  }

  late final _wire_off_topic_memory_test_input_complex_structPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_TreeNode>)>>(
      'wire_off_topic_memory_test_input_complex_struct');
  late final _wire_off_topic_memory_test_input_complex_struct =
      _wire_off_topic_memory_test_input_complex_structPtr
          .asFunction<void Function(int, ffi.Pointer<wire_TreeNode>)>();

  void wire_off_topic_memory_test_output_complex_struct(
    int port_,
    int len,
  ) {
    return _wire_off_topic_memory_test_output_complex_struct(
      port_,
      len,
    );
  }

  late final _wire_off_topic_memory_test_output_complex_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_off_topic_memory_test_output_complex_struct');
  late final _wire_off_topic_memory_test_output_complex_struct =
      _wire_off_topic_memory_test_output_complex_structPtr
          .asFunction<void Function(int, int)>();

  void wire_off_topic_deliberately_return_error(
    int port_,
  ) {
    return _wire_off_topic_deliberately_return_error(
      port_,
    );
  }

  late final _wire_off_topic_deliberately_return_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_off_topic_deliberately_return_error');
  late final _wire_off_topic_deliberately_return_error =
      _wire_off_topic_deliberately_return_errorPtr
          .asFunction<void Function(int)>();

  void wire_off_topic_deliberately_panic(
    int port_,
  ) {
    return _wire_off_topic_deliberately_panic(
      port_,
    );
  }

  late final _wire_off_topic_deliberately_panicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_off_topic_deliberately_panic');
  late final _wire_off_topic_deliberately_panic =
      _wire_off_topic_deliberately_panicPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_Point> new_box_autoadd_point_0() {
    return _new_box_autoadd_point_0();
  }

  late final _new_box_autoadd_point_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Point> Function()>>(
          'new_box_autoadd_point_0');
  late final _new_box_autoadd_point_0 = _new_box_autoadd_point_0Ptr
      .asFunction<ffi.Pointer<wire_Point> Function()>();

  ffi.Pointer<wire_Project> new_box_autoadd_project_0() {
    return _new_box_autoadd_project_0();
  }

  late final _new_box_autoadd_project_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Project> Function()>>(
          'new_box_autoadd_project_0');
  late final _new_box_autoadd_project_0 = _new_box_autoadd_project_0Ptr
      .asFunction<ffi.Pointer<wire_Project> Function()>();

  ffi.Pointer<wire_Request> new_box_autoadd_request_0() {
    return _new_box_autoadd_request_0();
  }

  late final _new_box_autoadd_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Request> Function()>>(
          'new_box_autoadd_request_0');
  late final _new_box_autoadd_request_0 = _new_box_autoadd_request_0Ptr
      .asFunction<ffi.Pointer<wire_Request> Function()>();

  ffi.Pointer<wire_Size> new_box_autoadd_size_0() {
    return _new_box_autoadd_size_0();
  }

  late final _new_box_autoadd_size_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Size> Function()>>(
          'new_box_autoadd_size_0');
  late final _new_box_autoadd_size_0 = _new_box_autoadd_size_0Ptr
      .asFunction<ffi.Pointer<wire_Size> Function()>();

  ffi.Pointer<wire_TreeNode> new_box_autoadd_tree_node_0() {
    return _new_box_autoadd_tree_node_0();
  }

  late final _new_box_autoadd_tree_node_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_TreeNode> Function()>>(
          'new_box_autoadd_tree_node_0');
  late final _new_box_autoadd_tree_node_0 = _new_box_autoadd_tree_node_0Ptr
      .asFunction<ffi.Pointer<wire_TreeNode> Function()>();

  ffi.Pointer<wire_Song> new_box_song_0() {
    return _new_box_song_0();
  }

  late final _new_box_song_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Song> Function()>>(
          'new_box_song_0');
  late final _new_box_song_0 =
      _new_box_song_0Ptr.asFunction<ffi.Pointer<wire_Song> Function()>();

  ffi.Pointer<wire_list_pattern> new_list_pattern_0(
    int len,
  ) {
    return _new_list_pattern_0(
      len,
    );
  }

  late final _new_list_pattern_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_pattern> Function(
              ffi.Int32)>>('new_list_pattern_0');
  late final _new_list_pattern_0 = _new_list_pattern_0Ptr
      .asFunction<ffi.Pointer<wire_list_pattern> Function(int)>();

  ffi.Pointer<wire_list_size> new_list_size_0(
    int len,
  ) {
    return _new_list_size_0(
      len,
    );
  }

  late final _new_list_size_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_list_size> Function(ffi.Int32)>>(
      'new_list_size_0');
  late final _new_list_size_0 = _new_list_size_0Ptr
      .asFunction<ffi.Pointer<wire_list_size> Function(int)>();

  ffi.Pointer<wire_list_tree_node> new_list_tree_node_0(
    int len,
  ) {
    return _new_list_tree_node_0(
      len,
    );
  }

  late final _new_list_tree_node_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_tree_node> Function(
              ffi.Int32)>>('new_list_tree_node_0');
  late final _new_list_tree_node_0 = _new_list_tree_node_0Ptr
      .asFunction<ffi.Pointer<wire_list_tree_node> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<RequestKind> inflate_Request_LoadModel() {
    return _inflate_Request_LoadModel();
  }

  late final _inflate_Request_LoadModelPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RequestKind> Function()>>(
          'inflate_Request_LoadModel');
  late final _inflate_Request_LoadModel = _inflate_Request_LoadModelPtr
      .asFunction<ffi.Pointer<RequestKind> Function()>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class Request_Init extends ffi.Opaque {}

class Request_Exit extends ffi.Opaque {}

class Request_GetModel extends ffi.Opaque {}

class wire_Pattern extends ffi.Struct {
  @ffi.Uint64()
  external int id;
}

class wire_list_pattern extends ffi.Struct {
  external ffi.Pointer<wire_Pattern> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Song extends ffi.Struct {
  @ffi.Uint64()
  external int id;

  external ffi.Pointer<wire_list_pattern> patterns;
}

class wire_Project extends ffi.Struct {
  @ffi.Uint64()
  external int id;

  external ffi.Pointer<wire_Song> song;
}

class Request_LoadModel extends ffi.Struct {
  external ffi.Pointer<wire_Project> field0;
}

class RequestKind extends ffi.Union {
  external ffi.Pointer<Request_Init> Init;

  external ffi.Pointer<Request_Exit> Exit;

  external ffi.Pointer<Request_GetModel> GetModel;

  external ffi.Pointer<Request_LoadModel> LoadModel;
}

class wire_Request extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<RequestKind> kind;
}

class wire_Size extends ffi.Struct {
  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;
}

class wire_Point extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_list_tree_node extends ffi.Struct {
  external ffi.Pointer<wire_TreeNode> ptr;

  @ffi.Int32()
  external int len;
}

class wire_TreeNode extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_list_tree_node> children;
}

class wire_list_size extends ffi.Struct {
  external ffi.Pointer<wire_Size> ptr;

  @ffi.Int32()
  external int len;
}



typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
