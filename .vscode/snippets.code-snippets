{
	// Place your anthem workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"License Notice (Rust)": {
		"prefix": ["license", "copyright"],
		"scope": "rust",
		"body": [
			"/*",
			"    Copyright (C) 2023 $1",
			"",
			"    This file is part of Anthem.",
			"",
			"    Anthem is free software: you can redistribute it and/or modify",
			"    it under the terms of the GNU General Public License as published by",
			"    the Free Software Foundation, either version 3 of the License, or",
			"    (at your option) any later version.",
			"",
			"    Anthem is distributed in the hope that it will be useful,",
			"    but WITHOUT ANY WARRANTY; without even the implied warranty of",
			"    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU",
			"    General Public License for more details.",
			"",
			"    You should have received a copy of the GNU General Public License",
			"    along with Anthem. If not, see <https://www.gnu.org/licenses/>.",
			"*/",
			"",
			"$0",
			""
		]
	},

	"License Notice (Dart)": {
		"prefix": ["license", "copyright"],
		"scope": "dart",
		"body": [
			"/*",
			"  Copyright (C) 2023 $1",
			"",
			"  This file is part of Anthem.",
			"",
			"  Anthem is free software: you can redistribute it and/or modify",
			"  it under the terms of the GNU General Public License as published by",
			"  the Free Software Foundation, either version 3 of the License, or",
			"  (at your option) any later version.",
			"",
			"  Anthem is distributed in the hope that it will be useful,",
			"  but WITHOUT ANY WARRANTY; without even the implied warranty of",
			"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU",
			"  General Public License for more details.",
			"",
			"  You should have received a copy of the GNU General Public License",
			"  along with Anthem. If not, see <https://www.gnu.org/licenses/>.",
			"*/",
			"",
			"$0",
			""
		]
	},

	"Cubit State": {
		"prefix": ["cubitState", "viewModelItem"],
		"scope": "dart",
		"body": [
			"part of '$1_cubit.dart';",
			"",
			"@freezed",
			"class $2State with _$$2State {",
			"",
			"  factory $2State({",
			"    required ID projectID,",
			"  }) = _$2State;",
			"}"
		],
	},

	"Cubit": {
		"prefix": ["cubit"],
		"scope": "dart",
		"body": [
			"import 'dart:async';",
			"",
			"import 'package:anthem/helpers/id.dart';",
			"import 'package:bloc/bloc.dart';",
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"",
			"part '$1_state.dart';",
			"part '$1_cubit.freezed.dart';",
			"",
			"class $2Cubit extends Cubit<$2State> {",
			"  late final ProjectModel project;",
			"",
			"  late final StreamSubscription<List<StateChange>> _stateChangeStream;",
			"",
			"  @override",
			"  Future<void> close() async {",
			"    await _stateChangeStream.cancel();",
			"",
			"    return super.close();",
			"  }",
			"",
			"  $2Cubit({required String projectID}) : super($2State(projectID: projectID)) {",
			"    project = Store.instance.projects[projectID]!;",
			"    _stateChangeStream = project.stateChangeStream.listen(_onModelChanged);",
			"  }",
			"",
			"  void _onModelChanged(List<StateChange> changes) {",
			"    // var didSomeItemChange = false;",
			"",
			"    for (final change in changes) {",
			"      change.whenOrNull(",
			"        // arrangement: (arrangementChange) {",
			"        //   arrangementChange.mapOrNull(",
			"        //     arrangementNameChanged: (change) {",
			"        //       if (change.arrangementID == state.arrangementID) {",
			"        //         didNameChange = true;",
			"        //       }",
			"        //     },",
			"        //   );",
			"        // },",
			"      );",
			"    }",
			"",
			"    $2State? newState;",
			"",
			"    // if (didSomeItemChange) {",
			"    //   newState = (newState ?? state).copyWith(",
			"    //     ...",
			"    //   );",
			"    // }",
			"",
			"    if (newState != null) {",
			"      emit(newState);",
			"    }",
			"  }",
			"}"
		],
	},

	"Command Impl": {
		"prefix": ["command"],
		"scope": "rust",
		"body": [
			"pub struct $1Command {",
			"    $0",
			"}",
			"",
			"impl Command for $1Command {",
			"    fn execute(&self, project: &mut Project, request_id: u64) -> Vec<Reply> {",
			"        vec![]",
			"    }",
			"",
			"    fn rollback(&self, project: &mut Project, request_id: u64) -> Vec<Reply> {",
			"        vec![]",
			"    }",
			"}",
		],
	},

	"Stateless widget with bloc builder": {
		"prefix": ["statelessWBloc", "blocStatelessW"],
		"scope": "dart",
		"body": [
			"class $1 extends StatelessWidget {",
			"  const $1({Key? key}) : super(key: key);",
			"",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return BlocBuilder<$2Cubit, $2State>(",
			"        builder: (context, state) {",
			"      return Container();",
			"    });",
			"  }",
			"}"
		]
	},

	"Model item": {
		"prefix": "modelItem",
		"scope": "dart",
		"body": [
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"",
			"part '$1.g.dart';",
			"",
			"@JsonSerializable()",
			"class $2 {",
			"  $2();",
			"",
			"  factory $2.fromJson(Map<String, dynamic> json) =>",
			"      _$$2FromJson(json);",
			"",
			"  Map<String, dynamic> toJson() => _$$2ToJson(this);",
			"}"
		]
	}
}